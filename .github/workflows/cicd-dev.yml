name: CI/CD-DEV

on:
  push:
    branches: [ dev ]

env:
  IMAGE_NAME: wonjun0120/linkyboard-ai

jobs:
# ───────────────────────────── 0) Preflight: 필수 시크릿 점검 ─────────────────────────────
  preflight:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 0-1) 필수 GitHub Secrets 누락 시 즉시 실패
      - name: Fail if required secrets are missing
        shell: bash
        run: |
          set -e
          req="DOCKER_HUB_USERNAME DOCKER_HUB_TOKEN EC2_HOST EC2_USER EC2_SSH_KEY ENV_FILE"
          for k in $req; do
            v="${!k}"
            if [ -z "$v" ]; then
              echo "::error title=Missing secret::$k is not set"
              exit 1
            fi
          done
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN:    ${{ secrets.DOCKER_HUB_TOKEN }}
          EC2_HOST:            ${{ secrets.EC2_HOST }}
          EC2_USER:            ${{ secrets.EC2_USER }}
          EC2_SSH_KEY:         ${{ secrets.EC2_SSH_KEY }}
          ENV_FILE:            ${{ secrets.ENV_FILE }}

      # 0-2) (선택) .env.example이 있으면 ENV_FILE이 모든 키를 포함하는지 검증
      - name: Validate ENV_FILE covers .env.example (if exists)
        if: ${{ hashFiles('.env.example') != '' }}
        shell: bash
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          set -e
          tmp_env="$(mktemp)"
          printf "%s\n" "${ENV_FILE}" > "$tmp_env"

          # 주석/빈줄 제거 후 키 비교
          missing=$(comm -23 \
            <(grep -v -E '^\s*($|#)' .env.example | cut -d= -f1 | sort -u) \
            <(grep -v -E '^\s*($|#)' "$tmp_env"    | cut -d= -f1 | sort -u) || true)

          if [ -n "$missing" ]; then
            echo "::error title=ENV_FILE missing keys::$(echo "$missing" | tr '\n' ' ')"
            exit 1
          fi

# ───────────────────────────── 1) Build & Push ─────────────────────────────
  build-and-push:
    needs: preflight
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build & Push Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

# ───────────────────────────── 2) Deploy ─────────────────────────────
  deploy:
    needs: [preflight, build-and-push]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 2-0) 배포 전에 ENV_FILE이 비어있지 않은지 1번 더 점검(이중 안전장치)
      - name: Assert ENV_FILE not empty
        shell: bash
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          if [ -z "${ENV_FILE}" ]; then
            echo "::error title=ENV_FILE empty::secrets.ENV_FILE is empty"
            exit 1
          fi

      # 2-1) docker-compose.yml 전송
      - name: Copy compose file to EC2
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/linkyboard/"

      # 2-2) 원격 배포
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true  # 원격 스크립트 에러 시 즉시 실패 (권장)
          script: |
            set -Eeuo pipefail

            cd ~/linkyboard

            echo "🔑  .env 업데이트"
            cat > .env <<'EOF'
            ${{ secrets.ENV_FILE }}
            EOF

            echo "🐳  이미지 Pull"
            docker compose pull

            # 실패 시 로그를 남기고 즉시 종료
            export GITHUB_SHA="${{ github.sha }}"
            MIGRATE_CTN="alembic-migrate-${GITHUB_SHA:0:7}"
            trap 'echo "❌ Migration failed. Tail logs:"; docker logs "$MIGRATE_CTN" 2>/dev/null | tail -n 200 || true' ERR

            echo "🗃  Alembic migrate on EC2 (dev)"
            # 현재 상태 확인
            docker compose run --rm app alembic current -v || true
            # 마이그레이션 실행
            docker compose run --rm --name "$MIGRATE_CTN" app alembic upgrade head
            # 마이그레이션 후 상태 확인
            docker compose run --rm app alembic current -v

            echo "🚀  컨테이너 재시작"
            docker compose up -d --remove-orphans
