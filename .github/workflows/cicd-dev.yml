name: CI/CD-DEV

on:
  push:
    branches: [ dev ]

env:
  IMAGE_NAME: wonjun0120/linkyboard-ai

jobs:
# ───────────────────────────── 0) Preflight: 필수 시크릿 점검 ─────────────────────────────
  preflight:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 0-1) 필수 GitHub Secrets 누락 시 즉시 실패
      - name: Fail if required secrets are missing
        shell: bash
        run: |
          set -e
          req="DOCKER_HUB_USERNAME DOCKER_HUB_TOKEN EC2_HOST EC2_USER EC2_SSH_KEY ENV_FILE"
          for k in $req; do
            v="${!k}"
            if [ -z "$v" ]; then
              echo "::error title=Missing secret::$k is not set"
              exit 1
            fi
          done
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_TOKEN:    ${{ secrets.DOCKER_HUB_TOKEN }}
          EC2_HOST:            ${{ secrets.EC2_HOST }}
          EC2_USER:            ${{ secrets.EC2_USER }}
          EC2_SSH_KEY:         ${{ secrets.EC2_SSH_KEY }}
          ENV_FILE:            ${{ secrets.ENV_FILE }}

      # 0-2) (선택) .env.example이 있으면 ENV_FILE이 모든 키를 포함하는지 검증
      - name: Validate ENV_FILE covers .env.example (if exists)
        if: ${{ hashFiles('.env.example') != '' }}
        shell: bash
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          set -e
          tmp_env="$(mktemp)"
          printf "%s\n" "${ENV_FILE}" > "$tmp_env"

          # 주석/빈줄 제거 후 키 비교
          missing=$(comm -23 \
            <(grep -v -E '^\s*($|#)' .env.example | cut -d= -f1 | sort -u) \
            <(grep -v -E '^\s*($|#)' "$tmp_env"    | cut -d= -f1 | sort -u) || true)

          if [ -n "$missing" ]; then
            echo "::error title=ENV_FILE missing keys::$(echo "$missing" | tr '\n' ' ')"
            exit 1
          fi

# ───────────────────────────── 1) Build & Push ─────────────────────────────
  build-and-push:
    needs: preflight
    runs-on: ubuntu-latest
    # 커밋 메시지 마지막에 [skip build], [no build], [skip ci]가 있으면 빌드 건너뛰기
    if: ${{ !endsWith(github.event.head_commit.message, '[skip build]') && !endsWith(github.event.head_commit.message, '[no build]') && !endsWith(github.event.head_commit.message, '[skip ci]') }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 이전 커밋과 비교하기 위해 필요

      # 변경된 파일 확인
      - name: Check for app code changes
        id: changes
        run: |
          echo "=== 변경된 파일 목록 ==="
          git diff --name-only HEAD~1 HEAD || echo "No changes found"
          
          echo "=== 문서/CI 파일 확인 ==="
          DOC_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(md|txt)$|^\.github/workflows/|^docs/|README' || true)
          echo "문서/CI 파일: $DOC_FILES"
          
          echo "=== 앱 코드/설정 파일 확인 ==="
          APP_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(py|js|ts|json|yml|yaml)$|^app/|^src/|Dockerfile|requirements\.txt|Pipfile|docker-compose' || true)
          echo "앱/설정 파일: $APP_FILES"
          
          # 빌드 스킵 조건 확인
          if [ -n "$DOC_FILES" ] && [ -z "$APP_FILES" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "⏭️ 문서 파일만 변경됨 - 빌드 건너뛰기"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "🔨 앱 코드 또는 설정 변경 감지 - 빌드 진행"
          fi

      - uses: docker/setup-qemu-action@v3
        if: steps.changes.outputs.skip != 'true'
      - uses: docker/setup-buildx-action@v3
        if: steps.changes.outputs.skip != 'true'

      - uses: docker/login-action@v3
        if: steps.changes.outputs.skip != 'true'
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build & Push Image
        if: steps.changes.outputs.skip != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

# ───────────────────────────── 2) Deploy ─────────────────────────────
  deploy:
    needs: [preflight, build-and-push]
    runs-on: ubuntu-latest
    # build-and-push가 성공하면 기다린 후 실행, 스킵되면 바로 실행
    if: ${{ always() && needs.preflight.result == 'success' && (needs.build-and-push.result == 'success' || needs.build-and-push.result == 'skipped') && !endsWith(github.event.head_commit.message, '[skip deploy]') && !endsWith(github.event.head_commit.message, '[no deploy]') && !endsWith(github.event.head_commit.message, '[skip ci]') }}

    steps:
      - uses: actions/checkout@v4

      # 2-0) 배포 전에 ENV_FILE이 비어있지 않은지 1번 더 점검(이중 안전장치)
      - name: Assert ENV_FILE not empty
        shell: bash
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        run: |
          if [ -z "${ENV_FILE}" ]; then
            echo "::error title=ENV_FILE empty::secrets.ENV_FILE is empty"
            exit 1
          fi

      # 2-1) docker-compose.yml 전송
      - name: Copy compose file to EC2
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/linkyboard/"

      # 2-2) 원격 배포
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true  # 원격 스크립트 에러 시 즉시 실패 (권장)
          script: |
            set -Eeuo pipefail

            cd ~/linkyboard

            echo "🔑  .env 업데이트"
            cat > .env <<'EOF'
            ${{ secrets.ENV_FILE }}
            EOF

            echo "🐳  이미지 Pull"
            docker compose pull

            echo "�  기존 컨테이너 중지"
            docker compose down || true

            echo "🗃  Alembic migrate on EC2 (dev)"
            # 환경변수 길이 문제 해결: 간단한 bash 스크립트 생성
            cat > run_migration.sh <<'EOF'
            #!/bin/bash
            set -Eeuo pipefail
            cd /app
            echo "📊 현재 마이그레이션 상태:"
            python -m alembic current -v || true
            echo ""
            echo "🔄 마이그레이션 실행:"
            python -m alembic upgrade head
            echo ""
            echo "✅ 마이그레이션 완료 상태:"
            python -m alembic current -v
            EOF
            
            chmod +x run_migration.sh
            
            echo "🔧 마이그레이션 실행"
            docker compose run --rm -v "$(pwd)/run_migration.sh:/app/run_migration.sh" app bash /app/run_migration.sh
            
            echo "🧹 임시 파일 정리"
            rm -f run_migration.sh

            echo "🚀  서비스 시작"
            docker compose up -d --remove-orphans
            
            # 서비스 상태 확인
            echo "🔍  서비스 상태 확인"
            sleep 5
            docker compose ps
