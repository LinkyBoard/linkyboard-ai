"""category tag 분리

Revision ID: 1ecee6ac3025
Revises: 143aed6078d3
Create Date: 2025-08-10 20:59:54.393754

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
# pgvector 관련 import (필요시)
import pgvector.sqlalchemy
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1ecee6ac3025'
down_revision: Union[str, Sequence[str], None] = '143aed6078d3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='카테고리 ID'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='카테고리명'),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True, comment='카테고리 임베딩 벡터'),
    sa.Column('frequency_count', sa.Integer(), nullable=True, comment='사용 빈도'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index('ix_categories_frequency', 'categories', ['frequency_count'], unique=False)
    op.create_index('ix_categories_name', 'categories', ['name'], unique=False)
    op.create_table('tags',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='태그 ID'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='태그명'),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True, comment='태그 임베딩 벡터'),
    sa.Column('frequency_global', sa.Integer(), nullable=True, comment='전체 사용 빈도'),
    sa.Column('user_count', sa.Integer(), nullable=True, comment='사용한 사용자 수'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index('ix_tags_frequency', 'tags', ['frequency_global'], unique=False)
    op.create_index('ix_tags_name', 'tags', ['name'], unique=False)
    op.create_table('user_category_preferences',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=False),
    sa.Column('frequency_count', sa.Integer(), nullable=True, comment='사용 빈도'),
    sa.Column('preference_score', sa.Float(), nullable=True, comment='선호도 점수'),
    sa.Column('last_used', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'category_id')
    )
    op.create_table('user_tag_interactions',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('interaction_count', sa.Integer(), nullable=True, comment='상호작용 횟수'),
    sa.Column('preference_score', sa.Float(), nullable=True, comment='선호도 점수'),
    sa.Column('last_interaction', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('context_category_id', sa.Integer(), nullable=True, comment='상호작용 맥락 카테고리'),
    sa.ForeignKeyConstraint(['context_category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'tag_id')
    )
    op.create_table('item_tags',
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('relevance_score', sa.Float(), nullable=True, comment='관련도 점수 (0.0-1.0)'),
    sa.Column('source', sa.String(length=20), nullable=True, comment='출처: ai, user, system'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('item_id', 'tag_id')
    )
    op.add_column('items', sa.Column('category_id', sa.Integer(), nullable=True, comment='카테고리 ID'))
    op.alter_column('items', 'category',
               existing_type=sa.VARCHAR(length=100),
               comment='카테고리명 (캐시용)',
               existing_comment='카테고리',
               existing_nullable=True)
    op.create_foreign_key(None, 'items', 'categories', ['category_id'], ['id'])
    op.drop_column('items', 'tags')
    op.alter_column('search_histories', 'search_type',
               existing_type=sa.VARCHAR(length=20),
               comment='검색 타입: semantic(의미검색), tag(태그검색), mixed(복합검색)',
               existing_comment='검색 타입: semantic(의미검색), keyword(키워드검색), mixed(복합검색)',
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('search_histories', 'search_type',
               existing_type=sa.VARCHAR(length=20),
               comment='검색 타입: semantic(의미검색), keyword(키워드검색), mixed(복합검색)',
               existing_comment='검색 타입: semantic(의미검색), tag(태그검색), mixed(복합검색)',
               existing_nullable=False)
    op.add_column('items', sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='아이템 태그 (JSON 형태로 저장)'))
    op.drop_constraint(None, 'items', type_='foreignkey')
    op.alter_column('items', 'category',
               existing_type=sa.VARCHAR(length=100),
               comment='카테고리',
               existing_comment='카테고리명 (캐시용)',
               existing_nullable=True)
    op.drop_column('items', 'category_id')
    op.drop_table('item_tags')
    op.drop_table('user_tag_interactions')
    op.drop_table('user_category_preferences')
    op.drop_index('ix_tags_name', table_name='tags')
    op.drop_index('ix_tags_frequency', table_name='tags')
    op.drop_table('tags')
    op.drop_index('ix_categories_name', table_name='categories')
    op.drop_index('ix_categories_frequency', table_name='categories')
    op.drop_table('categories')
    # ### end Alembic commands ###
