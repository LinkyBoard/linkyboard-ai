"""init

Revision ID: e5e9f011d234
Revises: 
Create Date: 2025-08-18 21:46:37.738773

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
# pgvector 관련 import (필요시)
import pgvector.sqlalchemy


# revision identifiers, used by Alembic.
revision: str = 'e5e9f011d234'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # pgvector 확장 설치
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")   # pgvector
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm")  # fuzzy search
    
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='카테고리 ID'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='카테고리명'),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True, comment='카테고리 임베딩 벡터'),
    sa.Column('frequency_count', sa.Integer(), nullable=True, comment='사용 빈도'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index('ix_categories_frequency', 'categories', ['frequency_count'], unique=False)
    op.create_index('ix_categories_name', 'categories', ['name'], unique=False)
    op.create_table('dedup_suggestion',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='중복 제안 ID'),
    sa.Column('board_id', sa.BigInteger(), nullable=False, comment='보드 ID'),
    sa.Column('doc_ids', sa.ARRAY(sa.BigInteger()), nullable=False, comment='중복 후보 문서 ID 배열 (최소 2개)'),
    sa.Column('score', sa.Float(), nullable=False, comment='유사도 점수 (0.0-1.0)'),
    sa.Column('accepted', sa.Boolean(), nullable=False, comment='사용자 수락 여부'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='생성일시'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_dedup_suggestion_accepted', 'dedup_suggestion', ['accepted'], unique=False)
    op.create_index('ix_dedup_suggestion_board_created', 'dedup_suggestion', ['board_id', 'created_at'], unique=False)
    op.create_index('ix_dedup_suggestion_score', 'dedup_suggestion', ['score'], unique=False)
    op.create_table('model_catalog',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='모델 카탈로그 ID'),
    sa.Column('model_name', sa.String(length=100), nullable=False, comment='모델명 (예: gpt-3.5-turbo, text-embedding-3-small)'),
    sa.Column('alias', sa.String(length=100), nullable=False, comment='모델 별칭 (사용자 친화적 이름)'),
    sa.Column('provider', sa.String(length=50), nullable=False, comment='모델 제공자 (openai, anthropic 등)'),
    sa.Column('model_type', sa.String(length=20), nullable=False, comment='모델 유형: llm, embedding'),
    sa.Column('role_mask', sa.Integer(), nullable=False, comment='모델 역할 마스크 (1=LLM, 2=embedding, 4=multimodal)'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='모델 상태 (active, deprecated, beta)'),
    sa.Column('version', sa.String(length=20), nullable=True, comment='모델 버전'),
    sa.Column('price_input', sa.Float(), nullable=True, comment='입력 토큰 가격 (USD/1M)'),
    sa.Column('price_output', sa.Float(), nullable=True, comment='출력 토큰 가격 (USD/1M)'),
    sa.Column('price_embedding', sa.Float(), nullable=True, comment='임베딩 가격 (USD/1M)'),
    sa.Column('weight_input', sa.Float(), nullable=True, comment='입력 토큰 WTU 가중치'),
    sa.Column('weight_output', sa.Float(), nullable=True, comment='출력 토큰 WTU 가중치'),
    sa.Column('weight_embedding', sa.Float(), nullable=True, comment='임베딩 토큰 WTU 가중치'),
    sa.Column('reference_model', sa.String(length=100), nullable=False, comment='기준 모델명'),
    sa.Column('reference_price_input', sa.Float(), nullable=False, comment='기준 입력 가격 (USD/1M)'),
    sa.Column('reference_price_output', sa.Float(), nullable=False, comment='기준 출력 가격 (USD/1M)'),
    sa.Column('cached_factor', sa.Float(), nullable=False, comment='캐시 토큰 할인율'),
    sa.Column('embedding_alpha', sa.Float(), nullable=False, comment='임베딩 가중치 조정 계수'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='활성 상태'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='생성일시'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='수정일시'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('model_name')
    )
    op.create_index('ix_model_catalog_alias', 'model_catalog', ['alias'], unique=False)
    op.create_index('ix_model_catalog_name', 'model_catalog', ['model_name'], unique=False)
    op.create_index('ix_model_catalog_provider', 'model_catalog', ['provider'], unique=False)
    op.create_index('ix_model_catalog_status', 'model_catalog', ['status'], unique=False)
    op.create_index('ix_model_catalog_type_status', 'model_catalog', ['model_type', 'status'], unique=False)
    op.create_table('tags',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='태그 ID'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='태그명'),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True, comment='태그 임베딩 벡터'),
    sa.Column('frequency_global', sa.Integer(), nullable=True, comment='전체 사용 빈도'),
    sa.Column('user_count', sa.Integer(), nullable=True, comment='사용한 사용자 수'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index('ix_tags_frequency', 'tags', ['frequency_global'], unique=False)
    op.create_index('ix_tags_name', 'tags', ['name'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.BigInteger(), nullable=False, comment='서비스 서버의 사용자 ID'),
    sa.Column('ai_preferences', sa.Text(), nullable=True, comment='AI 개인화 설정 (JSON)'),
    sa.Column('embedding_model_version', sa.String(length=50), nullable=True, comment='사용 중인 임베딩 모델 버전'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='활성 상태'),
    sa.Column('last_sync_at', sa.DateTime(timezone=True), nullable=True, comment='서비스 서버와 마지막 동기화 시간'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_users_active', 'users', ['is_active'], unique=False)
    op.create_index('ix_users_sync_time', 'users', ['last_sync_at'], unique=False)
    op.create_table('board_model_policy',
    sa.Column('board_id', sa.BigInteger(), nullable=False, comment='보드 ID'),
    sa.Column('default_model_id', sa.BigInteger(), nullable=True, comment='기본 모델 ID (외래키)'),
    sa.Column('allowed_model_ids', sa.ARRAY(sa.BigInteger()), nullable=True, comment='허용 모델 ID 배열'),
    sa.Column('budget_wtu', sa.Integer(), nullable=True, comment='월 예산 WTU'),
    sa.Column('confidence_target', sa.Float(), nullable=True, comment='품질 목표 점수 (0.0-1.0)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='생성일시'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='수정일시'),
    sa.ForeignKeyConstraint(['default_model_id'], ['model_catalog.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('board_id')
    )
    op.create_index('ix_board_model_policy_default_model', 'board_model_policy', ['default_model_id'], unique=False)
    op.create_table('items',
    sa.Column('id', sa.BigInteger(), autoincrement=False, nullable=False, comment='Spring Boot Item ID (동기화)'),
    sa.Column('user_id', sa.BigInteger(), nullable=False, comment='사용자 ID (외래키)'),
    sa.Column('item_type', sa.String(length=20), nullable=False, comment='아이템 타입: webpage(웹페이지), pdf(PDF문서), youtube(유튜브), image(이미지), document(문서) 등'),
    sa.Column('source_url', sa.String(length=2048), nullable=False, comment='원본 소스 URL'),
    sa.Column('title', sa.String(length=500), nullable=False, comment='제목'),
    sa.Column('thumbnail', sa.Text(), nullable=True, comment='썸네일 이미지 (base64 또는 URL)'),
    sa.Column('description', sa.Text(), nullable=True, comment='설명 또는 요약'),
    sa.Column('summary', sa.Text(), nullable=True, comment='요약'),
    sa.Column('memo', sa.Text(), nullable=True, comment='사용자 메모'),
    sa.Column('raw_content', sa.Text(), nullable=True, comment='원본 콘텐츠 (HTML, 텍스트, 메타데이터 등)'),
    sa.Column('content_metadata', sa.Text(), nullable=True, comment='콘텐츠 메타데이터 (JSON 형태)'),
    sa.Column('category_id', sa.BigInteger(), nullable=True, comment='카테고리 ID'),
    sa.Column('category', sa.String(length=100), nullable=True, comment='카테고리명 (캐시용)'),
    sa.Column('processing_status', sa.String(length=20), nullable=False, comment='처리 상태: raw(원본만), processed(처리완료), summarized(요약완료), embedded(임베딩완료)'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='활성 상태'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='생성일시'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='수정일시'),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_items_category', 'items', ['category'], unique=False)
    op.create_index('ix_items_created_at', 'items', ['created_at'], unique=False)
    op.create_index('ix_items_processing_status', 'items', ['processing_status'], unique=False)
    op.create_index('ix_items_source_url', 'items', ['source_url'], unique=True)
    op.create_index('ix_items_type', 'items', ['item_type'], unique=False)
    op.create_index('ix_items_type_status', 'items', ['item_type', 'processing_status'], unique=False)
    op.create_index('ix_items_user_id', 'items', ['user_id'], unique=False)
    op.create_index('ix_items_user_status', 'items', ['user_id', 'processing_status'], unique=False)
    op.create_index('ix_items_user_type', 'items', ['user_id', 'item_type'], unique=False)
    op.create_table('model_weight_history',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='가중치 히스토리 ID'),
    sa.Column('model_id', sa.BigInteger(), nullable=False, comment='모델 카탈로그 ID (외래키)'),
    sa.Column('w_in', sa.Float(), nullable=True, comment='입력 토큰 WTU 가중치'),
    sa.Column('w_out', sa.Float(), nullable=True, comment='출력 토큰 WTU 가중치'),
    sa.Column('w_embed', sa.Float(), nullable=True, comment='임베딩 토큰 WTU 가중치'),
    sa.Column('reason', sa.Text(), nullable=True, comment='가중치 변경 사유'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='생성일시'),
    sa.ForeignKeyConstraint(['model_id'], ['model_catalog.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_model_weight_history_created_at', 'model_weight_history', ['created_at'], unique=False)
    op.create_index('ix_model_weight_history_model_id', 'model_weight_history', ['model_id'], unique=False)
    op.create_table('search_histories',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='검색 기록 ID'),
    sa.Column('user_id', sa.BigInteger(), nullable=False, comment='사용자 ID (외래키)'),
    sa.Column('query', sa.String(length=500), nullable=False, comment='검색 쿼리'),
    sa.Column('query_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=True, comment='검색 쿼리 벡터 임베딩'),
    sa.Column('search_type', sa.String(length=20), nullable=False, comment='검색 타입: semantic(의미검색), tag(태그검색), mixed(복합검색)'),
    sa.Column('result_count', sa.Integer(), nullable=False, comment='검색 결과 수'),
    sa.Column('search_duration_ms', sa.Integer(), nullable=True, comment='검색 소요시간(밀리초)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='검색일시'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_search_histories_created_at', 'search_histories', ['created_at'], unique=False)
    op.create_index('ix_search_histories_query', 'search_histories', ['query'], unique=False)
    op.create_index('ix_search_histories_type', 'search_histories', ['search_type'], unique=False)
    op.create_index(op.f('ix_search_histories_user_id'), 'search_histories', ['user_id'], unique=False)
    op.create_index('ix_search_histories_user_query', 'search_histories', ['user_id', 'query'], unique=False)
    op.create_table('usage_meter',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='사용량 기록 ID'),
    sa.Column('user_id', sa.BigInteger(), nullable=False, comment='사용자 ID'),
    sa.Column('run_id', sa.BigInteger(), nullable=True, comment='실행 ID (배치 작업 시)'),
    sa.Column('llm_model', sa.String(length=100), nullable=True, comment='사용된 LLM 모델명'),
    sa.Column('embedding_model', sa.String(length=100), nullable=True, comment='사용된 임베딩 모델명'),
    sa.Column('selected_model_id', sa.BigInteger(), nullable=True, comment='사용자가 선택한 모델 ID'),
    sa.Column('model_weights_snapshot', sa.JSON(), nullable=True, comment='실행 시점의 모델 가중치 스냅샷'),
    sa.Column('board_id', sa.BigInteger(), nullable=True, comment='보드 ID (정책 추적용)'),
    sa.Column('in_tokens', sa.Integer(), nullable=False, comment='입력 토큰 수'),
    sa.Column('cached_in_tokens', sa.Integer(), nullable=False, comment='캐시된 입력 토큰 수'),
    sa.Column('out_tokens', sa.Integer(), nullable=False, comment='출력 토큰 수'),
    sa.Column('embed_tokens', sa.Integer(), nullable=False, comment='임베딩 토큰 수'),
    sa.Column('wtu', sa.Integer(), nullable=False, comment='계산된 WTU 값'),
    sa.Column('estimated_cost_usd', sa.Float(), nullable=True, comment='추정 비용 (USD)'),
    sa.Column('plan_month', sa.Date(), nullable=False, comment='계획 월 (YYYY-MM-01)'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='생성일시'),
    sa.ForeignKeyConstraint(['selected_model_id'], ['model_catalog.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_usage_meter_board_id', 'usage_meter', ['board_id'], unique=False)
    op.create_index('ix_usage_meter_created_at', 'usage_meter', ['created_at'], unique=False)
    op.create_index('ix_usage_meter_embedding_model', 'usage_meter', ['embedding_model'], unique=False)
    op.create_index('ix_usage_meter_llm_model', 'usage_meter', ['llm_model'], unique=False)
    op.create_index('ix_usage_meter_plan_month', 'usage_meter', ['plan_month'], unique=False)
    op.create_index('ix_usage_meter_selected_model', 'usage_meter', ['selected_model_id'], unique=False)
    op.create_index('ix_usage_meter_user_plan_month', 'usage_meter', ['user_id', 'plan_month'], unique=False)
    op.create_table('user_category_preferences',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('category_id', sa.BigInteger(), nullable=False),
    sa.Column('frequency_count', sa.Integer(), nullable=True, comment='사용 빈도'),
    sa.Column('preference_score', sa.Float(), nullable=True, comment='선호도 점수'),
    sa.Column('last_used', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'category_id')
    )
    op.create_table('user_model_policy',
    sa.Column('user_id', sa.BigInteger(), nullable=False, comment='사용자 ID'),
    sa.Column('default_model_id', sa.BigInteger(), nullable=True, comment='기본 모델 ID (외래키)'),
    sa.Column('allowed_model_ids', sa.ARRAY(sa.BigInteger()), nullable=True, comment='허용 모델 ID 배열'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='생성일시'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True, comment='수정일시'),
    sa.ForeignKeyConstraint(['default_model_id'], ['model_catalog.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index('ix_user_model_policy_default_model', 'user_model_policy', ['default_model_id'], unique=False)
    op.create_table('user_tag_interactions',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('tag_id', sa.BigInteger(), nullable=False),
    sa.Column('interaction_count', sa.Integer(), nullable=True, comment='상호작용 횟수'),
    sa.Column('preference_score', sa.Float(), nullable=True, comment='선호도 점수'),
    sa.Column('last_interaction', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('context_category_id', sa.BigInteger(), nullable=True, comment='상호작용 맥락 카테고리'),
    sa.ForeignKeyConstraint(['context_category_id'], ['categories.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'tag_id')
    )
    op.create_table('item_embedding_metadatas',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False, comment='임베딩 메타데이터 ID'),
    sa.Column('item_id', sa.BigInteger(), nullable=True, comment='아이템 ID (외래키)'),
    sa.Column('embedding_model', sa.String(length=50), nullable=False, comment='임베딩 모델명'),
    sa.Column('embedding_version', sa.String(length=50), nullable=False, comment='임베딩 모델 버전'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='생성일시'),
    sa.Column('chunk_number', sa.Integer(), nullable=False, comment='청크 번호 (0부터 시작)'),
    sa.Column('chunk_content', sa.Text(), nullable=False, comment='청크 텍스트 내용'),
    sa.Column('chunk_size', sa.Integer(), nullable=True, comment='청크 크기(문자 수)'),
    sa.Column('token_count', sa.Integer(), nullable=True, comment='토큰 수'),
    sa.Column('start_position', sa.Integer(), nullable=True, comment='원본에서 시작 위치'),
    sa.Column('end_position', sa.Integer(), nullable=True, comment='원본에서 끝 위치'),
    sa.Column('total_chunks', sa.Integer(), nullable=False, comment='총 청크 수'),
    sa.Column('embedding_vector', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=False, comment='아이템 임베딩 벡터'),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_item_embedding_metadatas_item_chunk', 'item_embedding_metadatas', ['item_id', 'chunk_number'], unique=True)
    op.create_index('ix_item_embedding_metadatas_item_id', 'item_embedding_metadatas', ['item_id'], unique=False)
    op.create_index('ix_item_embedding_metadatas_model_version', 'item_embedding_metadatas', ['embedding_model', 'embedding_version'], unique=False)
    op.create_table('item_tags',
    sa.Column('item_id', sa.BigInteger(), nullable=False),
    sa.Column('tag_id', sa.BigInteger(), nullable=False),
    sa.Column('relevance_score', sa.Float(), nullable=True, comment='관련도 점수 (0.0-1.0)'),
    sa.Column('source', sa.String(length=20), nullable=True, comment='출처: ai, user'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('item_id', 'tag_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('item_tags')
    op.drop_index('ix_item_embedding_metadatas_model_version', table_name='item_embedding_metadatas')
    op.drop_index('ix_item_embedding_metadatas_item_id', table_name='item_embedding_metadatas')
    op.drop_index('ix_item_embedding_metadatas_item_chunk', table_name='item_embedding_metadatas')
    op.drop_table('item_embedding_metadatas')
    op.drop_table('user_tag_interactions')
    op.drop_index('ix_user_model_policy_default_model', table_name='user_model_policy')
    op.drop_table('user_model_policy')
    op.drop_table('user_category_preferences')
    op.drop_index('ix_usage_meter_user_plan_month', table_name='usage_meter')
    op.drop_index('ix_usage_meter_selected_model', table_name='usage_meter')
    op.drop_index('ix_usage_meter_plan_month', table_name='usage_meter')
    op.drop_index('ix_usage_meter_llm_model', table_name='usage_meter')
    op.drop_index('ix_usage_meter_embedding_model', table_name='usage_meter')
    op.drop_index('ix_usage_meter_created_at', table_name='usage_meter')
    op.drop_index('ix_usage_meter_board_id', table_name='usage_meter')
    op.drop_table('usage_meter')
    op.drop_index('ix_search_histories_user_query', table_name='search_histories')
    op.drop_index(op.f('ix_search_histories_user_id'), table_name='search_histories')
    op.drop_index('ix_search_histories_type', table_name='search_histories')
    op.drop_index('ix_search_histories_query', table_name='search_histories')
    op.drop_index('ix_search_histories_created_at', table_name='search_histories')
    op.drop_table('search_histories')
    op.drop_index('ix_model_weight_history_model_id', table_name='model_weight_history')
    op.drop_index('ix_model_weight_history_created_at', table_name='model_weight_history')
    op.drop_table('model_weight_history')
    op.drop_index('ix_items_user_type', table_name='items')
    op.drop_index('ix_items_user_status', table_name='items')
    op.drop_index('ix_items_user_id', table_name='items')
    op.drop_index('ix_items_type_status', table_name='items')
    op.drop_index('ix_items_type', table_name='items')
    op.drop_index('ix_items_source_url', table_name='items')
    op.drop_index('ix_items_processing_status', table_name='items')
    op.drop_index('ix_items_created_at', table_name='items')
    op.drop_index('ix_items_category', table_name='items')
    op.drop_table('items')
    op.drop_index('ix_board_model_policy_default_model', table_name='board_model_policy')
    op.drop_table('board_model_policy')
    op.drop_index('ix_users_sync_time', table_name='users')
    op.drop_index('ix_users_active', table_name='users')
    op.drop_table('users')
    op.drop_index('ix_tags_name', table_name='tags')
    op.drop_index('ix_tags_frequency', table_name='tags')
    op.drop_table('tags')
    op.drop_index('ix_model_catalog_type_status', table_name='model_catalog')
    op.drop_index('ix_model_catalog_status', table_name='model_catalog')
    op.drop_index('ix_model_catalog_provider', table_name='model_catalog')
    op.drop_index('ix_model_catalog_name', table_name='model_catalog')
    op.drop_index('ix_model_catalog_alias', table_name='model_catalog')
    op.drop_table('model_catalog')
    op.drop_index('ix_dedup_suggestion_score', table_name='dedup_suggestion')
    op.drop_index('ix_dedup_suggestion_board_created', table_name='dedup_suggestion')
    op.drop_index('ix_dedup_suggestion_accepted', table_name='dedup_suggestion')
    op.drop_table('dedup_suggestion')
    op.drop_index('ix_categories_name', table_name='categories')
    op.drop_index('ix_categories_frequency', table_name='categories')
    op.drop_table('categories')
    # ### end Alembic commands ###
